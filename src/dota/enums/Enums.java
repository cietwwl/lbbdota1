// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: enums/enums.proto

package dota.enums;

public final class Enums {
  private Enums() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code AttackType}
   *
   * <pre>
   * 攻击类型
   * </pre>
   */
  public enum AttackType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>PHYSICAL = 1;</code>
     *
     * <pre>
     * 物理伤害
     * </pre>
     */
    PHYSICAL(0, 1),
    /**
     * <code>MAGICAL = 2;</code>
     *
     * <pre>
     * 魔法伤害
     * </pre>
     */
    MAGICAL(1, 2),
    ;

    /**
     * <code>PHYSICAL = 1;</code>
     *
     * <pre>
     * 物理伤害
     * </pre>
     */
    public static final int PHYSICAL_VALUE = 1;
    /**
     * <code>MAGICAL = 2;</code>
     *
     * <pre>
     * 魔法伤害
     * </pre>
     */
    public static final int MAGICAL_VALUE = 2;


    public final int getNumber() { return value; }

    public static AttackType valueOf(int value) {
      switch (value) {
        case 1: return PHYSICAL;
        case 2: return MAGICAL;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<AttackType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<AttackType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<AttackType>() {
            public AttackType findValueByNumber(int number) {
              return AttackType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return dota.enums.Enums.getDescriptor().getEnumTypes().get(0);
    }

    private static final AttackType[] VALUES = values();

    public static AttackType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private AttackType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:AttackType)
  }

  /**
   * Protobuf enum {@code CombatState}
   */
  public enum CombatState
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>STUN = 1;</code>
     *
     * <pre>
     * 眩晕
     * </pre>
     */
    STUN(0, 1),
    ;

    /**
     * <code>STUN = 1;</code>
     *
     * <pre>
     * 眩晕
     * </pre>
     */
    public static final int STUN_VALUE = 1;


    public final int getNumber() { return value; }

    public static CombatState valueOf(int value) {
      switch (value) {
        case 1: return STUN;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<CombatState>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<CombatState>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<CombatState>() {
            public CombatState findValueByNumber(int number) {
              return CombatState.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return dota.enums.Enums.getDescriptor().getEnumTypes().get(1);
    }

    private static final CombatState[] VALUES = values();

    public static CombatState valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private CombatState(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:CombatState)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\021enums/enums.proto*\'\n\nAttackType\022\014\n\010PHY" +
      "SICAL\020\001\022\013\n\007MAGICAL\020\002*\027\n\013CombatState\022\010\n\004S" +
      "TUN\020\001B\014\n\ndota.enums"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
