package com.lbb.dota

/**
 * 根据CSV表头数据生成Java代码.
 */
class Csv2Java {
    
    static void generate(String className, List<ColumnInfo> columns, File javaFile) {
        columns = columns.findAll {
            it.columnName != "id" && // 跳过id字段
            (it.useType == 2 || it.useType == 3) // 忽略client字段
        }
        
        javaFile.withWriter("utf-8") { writer ->
            writer.println "package dota.config.generated;"
            writer.println ""
            writer.println "// Generated by tool, DO NOT modify!"
            writer.println "public class ${className} extends BaseConfig {"
            writer.println ""

            // fields ----------------------------------------------------------
            columns.each { column ->
                writer.println "    private ${column.javaFieldType} ${column.javaFieldName}; // ${column.desc}"
            }
            writer.println ""

            // getters ---------------------------------------------------------
            columns.each { column ->
                String methodNameSuffix = CsvHelper.capitalize(column.javaFieldName)
                writer.println "    public final ${column.javaFieldType} get${methodNameSuffix}() {return ${column.javaFieldName};}"
            }
            
            writer.println ""
            writer.println "}"
        }
    }
    
    static void generateGameConfig(File javaFile, List configMap) {
        javaFile.withWriter("utf-8") { writer ->
            writer.println "package dota.config.generated;"
            writer.println "import java.util.Map;"
            writer.println "// Generated by tool, DO NOT modify!"
            
            writer.println """
public class GameConfig {
    private static final GameConfig INSTANCE = new GameConfig();
    public static GameConfig getInstance() {
        return INSTANCE;
    }\n\
"""
            writer.println  "    private GameConfig() {"
            
            configMap.each { str ->
                writer.println "        ${str}s = ConfigLoader.loadConfig(${str}.class);";
            }
            
            writer.println "\n    }"
            
            configMap.each { str ->
                writer.println "    private final Map<Integer, ${str}> ${str}s;";
                writer.println """    public ${str} get${str}(int id) {\n\
        return ${str}s.get(id);\n\
    }
                """
            }

            writer.println "}"
        }
    }
    
    static void generateConfigLoader(File javaFile) {
        javaFile.withWriter("utf-8") { writer ->
            writer.println """\n\
package dota.config.generated;

import com.google.common.collect.ImmutableList;
import com.google.gson.FieldNamingPolicy;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonObject;
import com.google.gson.reflect.TypeToken;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 从Classpath加载JSON配置文件.
 */
public class ConfigLoader {
    
    private static final Logger logger = LoggerFactory.getLogger(ConfigLoader.class);
    private static final Gson gson = new GsonBuilder()
            .setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE)
            .create();
    
    /**
     * 加载JSON数据.
     * @param <T>
     * @param <T>
     * @param cfgClass
     * @return
     * @throws ConfigException 
     */
    public static <T extends BaseConfig> Map<Integer, T> loadConfig(Class<T> cfgClass) throws ConfigException {
        // 根据类名推出文件名：XxxCfg|XxxConfig -> /Xxx.json
        String jsonFileName = "/" + cfgClass.getSimpleName().replaceAll("Cfg", "") + ".json";
        logger.info("Loading JSON: " + jsonFileName);
        
        // 加载JSON数据，并进行后处理
        List<T> cfgs = loadJson(jsonFileName, cfgClass);
        
        Map<Integer, T> resMap = new HashMap<>();
        
        for(T e: cfgs) {
        	resMap.put(e.getId(), e);
        }
        
        return resMap;
    }
    
    // .json => ImmutableList<T>
    private static <T> List<T> loadJson(String jsonFileName, Class<T> cfgClass) throws ConfigException {
        List<JsonObject> jsonObjs = loadJson(jsonFileName);
        ImmutableList.Builder<T> builder = ImmutableList.builder();
        
        for (JsonObject jsonObj : jsonObjs) {
            builder.add(gson.fromJson(jsonObj, cfgClass));
        }
        
        return builder.build();
    }
    
    // .json => List<JsonObject>
    private static List<JsonObject> loadJson(String jsonFileName) throws ConfigException {
        // http://stackoverflow.com/questions/20773850/gson-typetoken-with-dynamic-arraylists-type
        Type type = new TypeToken<ArrayList<JsonObject>>(){}.getType();
        
        try (InputStream is = ConfigLoader.class.getResourceAsStream(jsonFileName);
                InputStreamReader reader = new InputStreamReader(is, "utf-8")) {
            
            return gson.fromJson(reader, type);
        } catch (IOException | RuntimeException e) {
            throw new ConfigException("Failed to parse JSON: " + jsonFileName, e);
        }
    }

}
            """
        }
    }
    
        
    static void generateBaseConfig(File javaFile) {
        javaFile.withWriter("utf-8") { writer ->
             writer.println """\n\
package  dota.config.generated;

import java.lang.reflect.Method;

/**
 * 所有自动生成的配置类的超类.
 * 实现Comparable接口是为了能够使用二分法查找。
 * @see ConfigSearchAlgorithm.BINARY_SEARCH
 */
public abstract class BaseConfig implements Comparable<Integer> {
    
    // 配置表ID（每个配置表的第一列必须为ID列）
    private int id;

    public int getId() {
        return id;
    }

    @Override
    public int compareTo(Integer id) {
        return Integer.compare(this.id, id);
    }

    @Override
    public String toString() {
        return getClass().getSimpleName() + "#" + id;
    }
    
    // 用反射取int字段
    public int getIntField(String fieldName) {
        return (Integer) getFieldValue(fieldName);
    }
    
    // 用反射取String字段
    public String getStringField(String fieldName) {
        return (String) getFieldValue(fieldName);
    }
    
    // 用反射获取字段值
    private Object getFieldValue(String fieldName) {
        try {
            String getterName = "get" + fieldName.substring(0, 1).toUpperCase() + fieldName.substring(1);
            Method getter = getClass().getMethod(getterName);
            getter.setAccessible(true);
            return getter.invoke(this);
        } catch (ReflectiveOperationException e) {
            throw new RuntimeException("getIntField() failed!", e);
        }
    }
    
}

            """
        }
    }
    
    static void generateConfigException(File javaFile) {
        javaFile.withWriter("utf-8") { writer ->
             writer.println """
package dota.config.generated;

/**
 * 配置文件相关异常.
 */
@SuppressWarnings("serial")
public class ConfigException extends RuntimeException {

    public ConfigException(String message) {
        super(message);
    }

    public ConfigException(String message, Throwable cause) {
        super(message, cause);
    }
    
}

"""
        }
    }
    
    
}